<?php
/**
 * @file
 * Code for the CWP: Resources feature.
 */

include_once 'cwp_resources.features.inc';

/**
 * Implements hook_entity_info_alter().
 */
function cwp_resources_entity_info_alter(&$entity_info) {
  // Override taxonomy term callback with a custom callback.
  $entity_info['taxonomy_term']['uri callback'] = 'cwp_resources_term_uri';
}

/**
 * Returns the link path for taxonomy terms.
 */
function cwp_resources_term_uri($term) {
  // Go to the search api view page at /resources.
  switch ($term->vocabulary_machine_name) {
    case 'category':
      return array(
        'path' => 'resources/',
          'options' => array(
            'query' => array('f' => array('field_category:' . $term->tid))
          )
        );
    case 'tags':
      return array(
        'path' => 'resources/',
          'options' => array(
            'query' => array('f' => array('field_resource_tags:' . $term->tid))
          )
        );
    case 'province':
      return array(
        'path' => 'resources/',
          'options' => array(
            'query' => array('f[0]' => 'field_province:' . $term->tid)
          )
        );
    default:
      return array('path' => 'taxonomy/term/' . $term->tid);
  }
}

/**
 * Implements hook_facet_items_alter(), provided by facetapi_bonus module.
 * Must "configure filters" for a facet and enable
 * "Rewrite facet items via callback function" filter.
 */
function cwp_resources_facet_items_alter(&$build, &$settings) {

  if ($settings->facet == "field_category") {
    foreach($build as $key => $item) {
      $term = taxonomy_term_load($key);
      $description = $term->description;
      $build[$key]["#markup"] =  '<span class="description-tip" description="'. $description . '">' .  $item["#markup"] . '</span>';
      $build[$key]["#html"] = TRUE;
    }
  }

}

/**
 * Implements hook_block_info().
 */
function cwp_resources_block_info() {
  return array(
    'cwp_category_header' => array(
      'info' => t('CWP: Category header image'),
    ),
    'cwp_add_resource_link' => array(
      'info' => t('CWP: Add-resource link'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function cwp_resources_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'cwp_category_header':
      $block['subject'] = '';
      $block['content'] = cwp_resources_cwp_category_header_block_content();
      break;
    case 'cwp_add_resource_link':
      if (user_access('create resource content')) {
        $block['subject'] = '';
        $block['content'] = array(
          0 => array(
            '#type' => 'link',
            '#title' => t('Add new resource'),
            '#href' => 'node/add/resource',
            '#options' => array(
              'query' => array(
                'destination' => $_GET['q'],
              ),
              'attributes' => array(
                'class' => array('admin-resources-link'),
              ),
            ),
          ),
          1 => array(
            '#type' => 'link',
            '#title' => t('Manage resources'),
            '#href' => 'admin/cwp/resources',
            '#options' => array(
              'attributes' => array(
                'class' => array('admin-resources-link'),
              ),
            ),
          ),
        );
      }
      break;
  }

  return $block;
}

/**
 * Returns HTML for cwp_category_header block. Displayed on resource
 * page using context.
 */
function cwp_resources_cwp_category_header_block_content() {

  // If a category is selected, change the title and
  // get featured resource for that category.
  $params = drupal_get_query_parameters();
  if (isset($params['f'])) {
    foreach ($params['f'] as $facet) {
      $pair = explode(':', $facet);
      if ($pair[0] == 'field_category' && is_numeric($pair[1])) {
        $tid = $pair[1];
        $term = taxonomy_term_load($tid);
        drupal_set_title(check_plain($term->name));
        $featured_nid = !empty($term->field_featured_resource) ? $term->field_featured_resource[LANGUAGE_NONE][0]['target_id'] : 0;
      }
    }
  }

  // If no category-specific featured resource, get main featured resource.
  if (!isset($featured_nid) || !$featured_nid) {
    $nid = variable_get('main_featured_resource', 0);
    // If not set, get most recent resource from database.
    if (!$nid) {
      $nid = db_query_range("SELECT nid FROM {node} WHERE type='resource' ORDER BY created DESC", 0, 1)->fetchField();
    }
    $featured_nid = $nid;
  }

  $img_params = array(
    'style_name' => 'banner',
    'path' => drupal_get_path('theme', 'sunrise') . '/images/resources_cropped.jpg',
  );

  $node_view = node_view(node_load($featured_nid), 'teaser');

  $content = array(
    'banner' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('resources-banner')),
      'image' => array(
        '#markup' => theme('image', $img_params),
      ),
      'title' => array(
        '#markup' => '<h1 class="resources-banner-title">' . t('Resources') . '</h1>',
      ),
    ),
    'featured' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('featured-resource')),
      'header' => array(
        '#markup' => '<div class="featured-header">' . t('Featured resource') . '</div>',
      ),
      'resource' => array(
        '#markup' => render($node_view),
      ),
    ),
  );

  return render($content);
}

/**
 * Implements hook_action_info().
 */
function cwp_resources_action_info() {
  return array(
    'cwp_resources_feature_resource_action' => array(
      'type' => 'node',
      'label' => t('Feature the selected resource'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action form: cwp_resources_feature_resource_action.
 */
function cwp_resources_feature_resource_action_form($context) {
  $form = array();

  $vid = db_query("SELECT vid from {taxonomy_vocabulary} WHERE machine_name = 'category'")->fetchField();
  $categories = taxonomy_get_tree($vid);
  foreach ($categories as $tid => $term) {
    $options[$term->tid] = check_plain($term->name);
  }

  $form['category'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#description' => t('Either select a category to feature the resource when that category is used as a filter, or select None to show as the main featured resource when no category filter is used.'),
    '#options' => $options,
    '#multiple' =>  FALSE,
  );

  $form['#after_build'] = array('cwp_resources_feature_resource_action_afterbuild');
  return $form;
}

/**
 * After_build function for cwp_resources_feature_resource_action_form.
 */
function cwp_resources_feature_resource_action_afterbuild($form, $form_state) {
  $options = array(0 => t('None: Main featured resource'));

  $nid = $form_state['selection'][0];
  $node_wrapper = entity_metadata_wrapper('node', node_load($nid));
  foreach($node_wrapper->field_category->value() as $category) {
    if ($category) {
      $options[$category->tid] = check_plain($category->name);
    }
  }

  $form['category']['#options'] = $options;
  $form['category']['#default_value'] = $node_wrapper->field_category[0]->value();
  return $form;
}

/**
 * Submit handler for cwp_resources_feature_resource_action form.
 */
function cwp_resources_feature_resource_action_submit($form, $form_state) {
  return $form_state['values'];
}

/**
 * Action handler for cwp_resources_feature_resource_action form.
 */
function cwp_resources_feature_resource_action(&$node, $context) {

  $tid = $context['category'];
  if ($tid) {
    $term = taxonomy_term_load($tid);
    $term->field_featured_resource[LANGUAGE_NONE][0]['target_id'] = $node->nid;
    taxonomy_term_save($term);
  }
  else {
    variable_set('main_featured_resource', $node->nid);
  }
}
